snippet new
	newtype ${1:name} = $1 { un$1 :: ${2} }

snippet if
	if ${1}
	then ${2}
	else ${3}

snippet importq
	import qualified ${1:Data.Text} as ${2:T}

snippet m
	${1} = do ${2}
	         ${3}

snippet cl
	class ${1:Name} where
	  ${2}

snippet in
	instance ${1:Class} ${2:Type} where
	  ${3}

snippet rec
	data ${1:Type} = $1
			{ ${3:field} :: ${4:Type}
			, ${5}
			} deriving (${6:Classes})

snippet pragma 
	{-# LANGUAGE ${1} #-}

snippet gadt 
	{-# LANGUAGE GADTs #-}

snippet rankn
	{-# LANGUAGE RankNTypes #-}

snippet case
	case ${1} of
	     ${2} -> ${3}
	     ${4} -> ${5}

snippet let
	let ${1} = ${2}
	in ${3}
snippet where
	where
		${1:fn} = ${2:undefined}
snippet if
	if ${1:condition}
	   then ${2:expression}
	   else ${3:expression}

snippet \
	\ ${1:pattern} -> ${2:expression}

snippet bar
	-------------------------------------------------------------------------------
	-- ${1}
	-------------------------------------------------------------------------------

snippet cat
	instance Category ${1} where
		id = ${2}
		(.) = ${3}

snippet fun
	instance Functor ${1} where
		fmap = ${2}

snippet monad
	instance Monad ${1} where
		${2} >>= f = ${3}
		return = ${4}

snippet usual
	import Data.Maybe
	import Data.Functor
	import Data.Foldable
	import Data.Traversable
	import Control.Monad
	import Control.Applicative

snippet containers
	import qualified Data.HashMap.Lazy as HashMap
	import qualified Data.HashSet      as HashSet
	import qualified Data.IntMap       as IntMap
	import qualified Data.IntSet       as IntSet
	import qualified Data.IxSet        as IxSet
	import qualified Data.Map          as Map
	import qualified Data.Sequence     as Seq
	import qualified Data.Set          as Set

snippet ffi
	{-# LANGUAGE ForeignFunctionInterface #-}

snippet flex
	{-# LANGUAGE FlexibleInstances #-}
	{-# LANGUAGE FlexibleConstants #-}

snippet mparam
	{-# LANGUAGE MultiParamTypeClasses #-}

snippet gnew
	{-# LANGUAGE GeneralizedNewtypeDeriving #-}

snippet nowarn
	{-# OPTIONS_GHC -fno-warn-name-shadowing  #-}
	{-# OPTIONS_GHC -fno-warn-type-defaults   #-}

snippet box
	--------------------------------------------------------------------
	-- |
	-- Module    :   
	-- Copyright :  (c) Stephen Diehl 2013
	-- License   :  MIT
	-- Maintainer:  stephen.m.diehl@gmail.com
	-- Stability :  experimental
	-- Portability: non-portable
	--
	--------------------------------------------------------------------

snippet dd
	deriving (Eq, Ord, Read, Show, Typeable, Data)
